function p_shuf = shuf_test(map1, map2, n_rot, type)

% shuf_test(map1, map2, n_rot, type);
% 
% Usage: p_shuf = spin_test(map1, map2, [n_rot, [type]]);
% 
% INPUTS
%    map1            = one of two subcortical map to be correlated
%    map2            = the other subcortical map to be correlated
%    n_rot           = number of shuffles (default 100)
%    type            = correlation type, 'pearson' (default), 'spearman'
% 
% OUTPUT
%    p_shuf          = permutation p-value
% 
%  Sara Lariviere | a sunny September day 2020


if nargin<3
    n_rot=1000;
end
if nargin<4
    type='pearson';
end

nroi = length(map1);
r = 0; c = 0; % count successful (r) and unsuccessful (c) iterations
perm_id = zeros(nroi, n_rot); % initialise output array

while (r < n_rot)
    rot_lr_sort = randperm(nroi);
    
    % verify that permutation does not map to itself
    if ~all(rot_lr_sort==1:nroi)
        r = r+1;
        perm_id(:,r) = rot_lr_sort; % if it doesn't, store it
    else
        c = c+1;
        disp(['map to itself n.' num2str(c)])
    end
    
    % track progress
    if mod(r,100)==0; 
        disp(['permutation ' num2str(r) ' of ' num2str(n_rot)]); 
    end
    
    rho_emp = corr(x, y, 'type', corr_type);     % empirical correlation
    
    
end

return